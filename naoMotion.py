# -*- coding: utf-8 -*-
import math,random
from naoqi import ALProxy
import numpy,time,ftplib,globalVar
import vision_definitions


class Motion:
    #constructor
    def __init__(self,ip = 'nao.local',port  = 9559):
        try:
            self.ftp = ftplib.FTP(ip)
            self.ftp.login("nao","nao")
        except Exception, e:
            print "Error when create FTP connection"
        try:
            self.motionProxy = ALProxy('ALMotion',ip,port)
            self.camProxy = ALProxy('ALVideoDevice',ip,port)
            self.tts = ALProxy("ALTextToSpeech",ip,port)
            self.audioDevice = ALProxy('ALAudioDevice',ip,port)
            self.record = ALProxy('ALAudioRecorder',ip,port)
            self.postureProxy = ALProxy("ALRobotPosture", ip, port)
            resolution = vision_definitions.kVGA
            colorSpace = vision_definitions.kRGBColorSpace
            self.fps = 15
            self.videoClient = self.camProxy.subscribeCamera('python_client', 0, resolution, colorSpace, self.fps)
            # print self.videoClient
            # in case of camera subscribe overflow
            assert self.videoClient is not None
            self.motionProxy.wakeUp()
            self.postureProxy.goToPosture("StandInit", 0.5)
        except Exception, e:
            print "Error when creating ALPhotoCapture proxy:"
            print str(e)
            exit(1)

    def __del__(self):
        self.camProxy.unsubscribe(self.videoClient)
        self.camProxy.setAllParametersToDefault(0)
        self.motionProxy.rest()
    #
    def move(self,x,y):
        pass

    #take pictures
    def takePic(self):
        print "take picture!"
        naoImage = self.camProxy.getImageRemote(self.videoClient)
        # assert naoImage is not None
        # print naoImage
        width = naoImage[0]
        height = naoImage[1]
        nchanels = naoImage[2]
        array = naoImage[6]
        return self.__str2array(array, (height, width, nchanels))

    def __str2array(self, string, shape):
        assert len(string) == shape[0] * shape[1] * shape[2], len(shape) == 3
        image = numpy.zeros(shape, numpy.uint8)
        for i in range(0, shape[0]):
            p1 = i * shape[1] * shape[2]
            for j in range(0, shape[1]):
                p2 = j * shape[2]
                for c in range(0, shape[2]):
                    p3 = shape[2] - c - 1
                    image[i, j, c] = ord(string[p1 + p2 + p3])
        return image

    #record sound
    def recordSound(self,filename,filePath):
        print 'start recording'
        self.record.startMicrophonesRecording("/home/nao/"+str(filename), 'wav', 16000, (0,0,1,0))
        time.sleep(globalVar.REC_LENGTH)
        self.record.stopMicrophonesRecording()
        print 'end recording'
        self.__getfile(filename,filePath)

    # ftp 获取音频
    def __getfile(self,filename,filepath):
        f = open(filepath,"wb")
        self.ftp.retrbinary("RETR %s" % filename,f.write,8192)
        f.close()


    def say(self,string):
        # string  = "1+1 = 2"
        self.tts.say(string.encode('utf8'))

    # for instruction
    def turnleft(self):
        x = 0
        y = 0
        theta = math.pi / 2
        self.motionProxy.moveTo(x, y, theta)


    def turnright(self):
        x = 0
        y = 0
        theta = - math.pi / 2
        self.motionProxy.moveTo(x, y, theta)


    def turnback(self):
        x = 0
        y = 0
        theta = math.pi
        self.motionProxy.moveTo(x, y, theta)


    def goahead(self):
        x = 0.5
        y = 0
        self.motionProxy.moveTo(x,y,0)

    def stop(self):
        self.motionProxy.stopMove()


    def sitdown(self):
        self.postureProxy.goToPosture("Sit", 1.0)

    def standup(self):
        self.postureProxy.goToPosture("Stand",1.0)

    def dance1(self):
        names = list()
        times = list()
        keys = list()
        names.append("HeadPitch")
        times.append([1.26667, 3.53333, 4.33333])
        keys.append(
            [[-0.012314, [3, -0.422222, 0], [3, 0.755556, 0]], [0.00609404, [3, -0.755556, 0], [3, 0.266667, 0]],
             [0.00609404, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.26667, 3.53333, 4.33333])
        keys.append(
            [[0.00762803, [3, -0.422222, 0], [3, 0.755556, 0]], [0.00762803, [3, -0.755556, 0], [3, 0.266667, 0]],
             [0.00762803, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.191576, [3, -0.422222, 0], [3, 0.244444, 0]], [0.205383, [3, -0.244444, 0], [3, 0.511111, 0]],
                     [0.183907, [3, -0.511111, 0], [3, 0.266667, 0]], [0.183907, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.0659823, [3, -0.422222, 0], [3, 0.244444, 0]],
                     [0.0613804, [3, -0.244444, 0.00460191], [3, 0.511111, -0.00962217]],
                     [-0.0107176, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.0107176, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[-1.4772, [3, -0.422222, 0], [3, 0.488889, 0]], [-1.55697, [3, -0.488889, 0], [3, 0.266667, 0]],
                     [-0.010696, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.010696, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[-1.71812, [3, -0.422222, 0], [3, 0.488889, 0]],
                     [-1.29627, [3, -0.488889, -0.323915], [3, 0.266667, 0.176681]],
                     [-0.216335, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.216335, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([1.26667, 3.53333, 4.33333])
        keys.append([[0.997114, [3, -0.422222, 0], [3, 0.755556, 0]], [0.995296, [3, -0.755556, 0], [3, 0.266667, 0]],
                     [0.995296, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.179256, [3, -0.422222, 0], [3, 0.244444, 0]],
                     [0.162382, [3, -0.244444, 0.0168733], [3, 0.511111, -0.0352806]],
                     [-0.24106, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.24106, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.0580999, [3, -0.422222, 0], [3, 0.244444, 0]], [0.07344, [3, -0.244444, 0], [3, 0.511111, 0]],
                     [-0.145922, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.145922, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[-0.730228, [3, -0.422222, 0], [3, 0.244444, 0]], [-0.739431, [3, -0.244444, 0], [3, 0.511111, 0]],
                     [-0.487856, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.487856, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.185295, [3, -0.422222, 0], [3, 0.244444, 0]],
                     [0.169954, [3, -0.244444, 0.00146728], [3, 0.511111, -0.00306794]],
                     [0.166886, [3, -0.511111, 0], [3, 0.266667, 0]], [0.166886, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[1.53089, [3, -0.422222, 0], [3, 0.488889, 0]], [0.179436, [3, -0.488889, 0], [3, 0.266667, 0]],
                     [1.7073, [3, -0.266667, 0], [3, 0.266667, 0]], [1.7073, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[0.039842, [3, -0.422222, 0], [3, 0.488889, 0]], [0, [3, -0.488889, 0], [3, 0.266667, 0]],
                     [1.35601, [3, -0.266667, 0], [3, 0.266667, 0]], [1.34374, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([1.26667, 3.53333, 4.33333])
        keys.append([[-0.277696, [3, -0.422222, 0], [3, 0.755556, 0]], [-0.289967, [3, -0.755556, 0], [3, 0.266667, 0]],
                     [-0.289967, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[-0.411138, [3, -0.422222, 0], [3, 0.244444, 0]],
                     [-0.401935, [3, -0.244444, -0.00920312], [3, 0.511111, 0.0192429]],
                     [0.352792, [3, -0.511111, 0], [3, 0.266667, 0]], [0.352792, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.0322537, [3, -0.422222, 0], [3, 0.244444, 0]],
                     [0.0337877, [3, -0.244444, -0.00153397], [3, 0.511111, 0.00320739]],
                     [0.248547, [3, -0.511111, 0], [3, 0.266667, 0]], [0.248547, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[1.46348, [3, -0.422222, 0], [3, 0.488889, 0]], [1.56319, [3, -0.488889, 0], [3, 0.266667, 0]],
                     [1.54171, [3, -0.266667, 0], [3, 0.266667, 0]], [1.54171, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[1.52015, [3, -0.422222, 0], [3, 0.488889, 0]], [1.44499, [3, -0.488889, 0], [3, 0.266667, 0]],
                     [1.65821, [3, -0.266667, 0], [3, 0.266667, 0]], [1.65668, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([1.26667, 3.53333, 4.33333])
        keys.append([[1, [3, -0.422222, 0], [3, 0.755556, 0]], [1, [3, -0.755556, 0], [3, 0.266667, 0]],
                     [1, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.489289, [3, -0.422222, 0], [3, 0.244444, 0]], [0.490823, [3, -0.244444, 0], [3, 0.511111, 0]],
                     [-0.279246, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.279246, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[-0.148778, [3, -0.422222, 0], [3, 0.244444, 0]],
                     [-0.15338, [3, -0.244444, 0.00460191], [3, 0.511111, -0.00962217]],
                     [-0.257691, [3, -0.511111, 0], [3, 0.266667, 0]], [-0.257691, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([1.26667, 2, 3.53333, 4.33333])
        keys.append([[0.47666, [3, -0.422222, 0], [3, 0.244444, 0]],
                     [0.455184, [3, -0.244444, 0.0214763], [3, 0.511111, -0.044905]],
                     [0.0195278, [3, -0.511111, 0], [3, 0.266667, 0]], [0.0195278, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[0.00464395, [3, -0.422222, 0], [3, 0.488889, 0]], [2.07247, [3, -0.488889, 0], [3, 0.266667, 0]],
                     [1.56779, [3, -0.266667, 0], [3, 0.266667, 0]], [1.56779, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([1.26667, 2.73333, 3.53333, 4.33333])
        keys.append([[-0.11816, [3, -0.422222, 0], [3, 0.488889, 0]],
                     [-0.154976, [3, -0.488889, 0.0138962], [3, 0.266667, -0.00757972]],
                     [-0.182588, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.182588, [3, -0.266667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([1.26667, 3.53333, 4.33333])
        keys.append([[0.408002, [3, -0.422222, 0], [3, 0.755556, 0]], [0.41107, [3, -0.755556, 0], [3, 0.266667, 0]],
                     [0.41107, [3, -0.266667, 0], [3, 0, 0]]])

        try:
            # uncomment the following line and modify the IP if you use this script outside Choregraphe.
            # motion = ALProxy("ALMotion", IP, 9559)
            self.motionProxy.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
            print err


    def dance2(self):
        # Choregraphe bezier export in Python.
        from naoqi import ALProxy
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[-0.136568, [3, -0.333333, 0], [3, 0.32, 0]], [-0.268493, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.118076, [3, -0.453333, 0], [3, 0.453333, 0]], [-0.268493, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.118076, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.268493, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.118076, [3, -0.44, 0], [3, 0.466667, 0]], [-0.268493, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [-0.144238, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[-0.021518, [3, -0.333333, 0], [3, 0.32, 0]], [0.384992, [3, -0.32, 0], [3, 0.453333, 0]],
                     [-0.214803, [3, -0.453333, 0], [3, 0.453333, 0]], [0.384992, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [-0.214803, [3, -0.466667, 0], [3, 0.413333, 0]], [0.384992, [3, -0.413333, 0], [3, 0.44, 0]],
                     [-0.214803, [3, -0.44, 0], [3, 0.466667, 0]], [0.384992, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [-0.032256, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.095066, [3, -0.333333, 0], [3, 0.32, 0]],
                     [0.174835, [3, -0.32, -0.00324755], [3, 0.453333, 0.00460069]],
                     [0.179436, [3, -0.453333, 0], [3, 0.453333, 0]], [0.174835, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.179436, [3, -0.466667, 0], [3, 0.413333, 0]], [0.174835, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.179436, [3, -0.44, 0], [3, 0.466667, 0]],
                     [0.174835, [3, -0.466667, 0.00460069], [3, 0.506667, -0.00499504]],
                     [0.093532, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[-0.116542, [3, -0.333333, 0], [3, 0.32, 0]], [-0.0720561, [3, -0.32, 0], [3, 0.453333, 0]],
                     [-0.141086, [3, -0.453333, 0], [3, 0.453333, 0]],
                     [-0.0720561, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [-0.141086, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.0720561, [3, -0.413333, 0], [3, 0.44, 0]],
                     [-0.141086, [3, -0.44, 0], [3, 0.466667, 0]], [-0.0720561, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [-0.116542, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([1, 1.96, 2.64, 3.32, 3.96, 4.68, 5.36, 6.08, 6.68, 7.32, 8, 8.64, 9.4, 10.04, 11.56])
        keys.append([[-0.38806, [3, -0.333333, 0], [3, 0.32, 0]], [-0.199378, [3, -0.32, 0], [3, 0.226667, 0]],
                     [-1.22562, [3, -0.226667, 0], [3, 0.226667, 0]], [-0.391128, [3, -0.226667, 0], [3, 0.213333, 0]],
                     [-1.22562, [3, -0.213333, 0], [3, 0.24, 0]], [-0.199378, [3, -0.24, 0], [3, 0.226667, 0]],
                     [-1.22562, [3, -0.226667, 0], [3, 0.24, 0]], [-0.391128, [3, -0.24, 0], [3, 0.2, 0]],
                     [-1.22562, [3, -0.2, 0], [3, 0.213333, 0]], [-0.199378, [3, -0.213333, 0], [3, 0.226667, 0]],
                     [-1.22562, [3, -0.226667, 0], [3, 0.213333, 0]], [-0.391128, [3, -0.213333, 0], [3, 0.253333, 0]],
                     [-1.22562, [3, -0.253333, 0], [3, 0.213333, 0]], [-0.199378, [3, -0.213333, 0], [3, 0.506667, 0]],
                     [-0.427944, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([1, 1.96, 2.64, 3.32, 3.96, 4.68, 5.36, 6.08, 6.68, 7.32, 8, 8.64, 9.4, 10.04, 11.56])
        keys.append([[-1.20883, [3, -0.333333, 0], [3, 0.32, 0]], [-1.56165, [3, -0.32, 0], [3, 0.226667, 0]],
                     [-0.803859, [3, -0.226667, -0.204022], [3, 0.226667, 0.204022]],
                     [-0.337522, [3, -0.226667, 0], [3, 0.213333, 0]],
                     [-0.803859, [3, -0.213333, 0.192021], [3, 0.24, -0.216023]],
                     [-1.56165, [3, -0.24, 0], [3, 0.226667, 0]],
                     [-0.803859, [3, -0.226667, -0.198193], [3, 0.24, 0.209851]],
                     [-0.337522, [3, -0.24, 0], [3, 0.2, 0]],
                     [-0.803859, [3, -0.2, 0.197441], [3, 0.213333, -0.210603]],
                     [-1.56165, [3, -0.213333, 0], [3, 0.226667, 0]],
                     [-0.803859, [3, -0.226667, -0.210204], [3, 0.213333, 0.19784]],
                     [-0.337522, [3, -0.213333, 0], [3, 0.253333, 0]],
                     [-0.803859, [3, -0.253333, 0.22151], [3, 0.213333, -0.186534]],
                     [-1.56165, [3, -0.213333, 0], [3, 0.506667, 0]], [-1.17509, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([1, 1.96, 2.64, 3.32, 3.96, 4.68, 5.36, 6.08, 6.68, 7.32, 8, 8.64, 9.4, 10.04, 11.56])
        keys.append([[0.3056, [3, -0.333333, 0], [3, 0.32, 0]], [0.8592, [3, -0.32, 0], [3, 0.226667, 0]],
                     [0.8592, [3, -0.226667, 0], [3, 0.226667, 0]], [0.8592, [3, -0.226667, 0], [3, 0.213333, 0]],
                     [0.8592, [3, -0.213333, 0], [3, 0.24, 0]], [0.8592, [3, -0.24, 0], [3, 0.226667, 0]],
                     [0.8592, [3, -0.226667, 0], [3, 0.24, 0]], [0.8592, [3, -0.24, 0], [3, 0.2, 0]],
                     [0.8592, [3, -0.2, 0], [3, 0.213333, 0]], [0.8592, [3, -0.213333, 0], [3, 0.226667, 0]],
                     [0.8592, [3, -0.226667, 0], [3, 0.213333, 0]], [0.8592, [3, -0.213333, 0], [3, 0.253333, 0]],
                     [0.8592, [3, -0.253333, 0], [3, 0.213333, 0]], [0.8592, [3, -0.213333, 0], [3, 0.506667, 0]],
                     [0.3048, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.136568, [3, -0.333333, 0], [3, 0.32, 0]], [-0.243864, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.0552659, [3, -0.453333, 0], [3, 0.453333, 0]], [-0.243864, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.0552659, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.243864, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.0552659, [3, -0.44, 0], [3, 0.466667, 0]], [-0.243864, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [0.138102, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.116626, [3, -0.333333, 0], [3, 0.32, 0]], [0.066004, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.142704, [3, -0.453333, 0], [3, 0.453333, 0]], [0.066004, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.142704, [3, -0.466667, 0], [3, 0.413333, 0]], [0.066004, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.142704, [3, -0.44, 0], [3, 0.466667, 0]], [0.066004, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [0.11816, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append(
            [[-0.1733, [3, -0.333333, 0], [3, 0.32, 0]], [-0.371186, [3, -0.32, 0.0503575], [3, 0.453333, -0.0713399]],
             [-0.538392, [3, -0.453333, 0], [3, 0.453333, 0]], [-0.371186, [3, -0.453333, 0], [3, 0.466667, 0]],
             [-0.538392, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.371186, [3, -0.413333, 0], [3, 0.44, 0]],
             [-0.538392, [3, -0.44, 0], [3, 0.466667, 0]],
             [-0.371186, [3, -0.466667, -0.0585932], [3, 0.506667, 0.0636155]],
             [-0.171766, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[-0.090548, [3, -0.333333, 0], [3, 0.32, 0]], [0.223922, [3, -0.32, 0], [3, 0.453333, 0]],
                     [-0.00310993, [3, -0.453333, 0], [3, 0.453333, 0]],
                     [0.223922, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [-0.00310993, [3, -0.466667, 0], [3, 0.413333, 0]], [0.223922, [3, -0.413333, 0], [3, 0.44, 0]],
                     [-0.00310993, [3, -0.44, 0], [3, 0.466667, 0]], [0.223922, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [-0.090548, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([1, 1.96, 2.64, 3.32, 3.96, 4.68, 5.36, 6.08, 6.68, 7.32, 8, 8.64, 9.4, 10.04, 11.56])
        keys.append([[1.53089, [3, -0.333333, 0], [3, 0.32, 0]], [-1.08611, [3, -0.32, 0], [3, 0.226667, 0]],
                     [0.759288, [3, -0.226667, -0.200954], [3, 0.226667, 0.200954]],
                     [0.960242, [3, -0.226667, 0], [3, 0.213333, 0]],
                     [0.759288, [3, -0.213333, 0.200954], [3, 0.24, -0.226073]],
                     [-1.08611, [3, -0.24, 0], [3, 0.226667, 0]],
                     [0.759288, [3, -0.226667, -0.18979], [3, 0.24, 0.200954]], [0.960242, [3, -0.24, 0], [3, 0.2, 0]],
                     [0.759288, [3, -0.2, 0.200954], [3, 0.213333, -0.214351]],
                     [-1.08611, [3, -0.213333, 0], [3, 0.226667, 0]],
                     [0.759288, [3, -0.226667, -0.213513], [3, 0.213333, 0.200954]],
                     [0.960242, [3, -0.213333, 0], [3, 0.253333, 0]],
                     [0.759288, [3, -0.253333, 0.200954], [3, 0.213333, -0.169224]],
                     [-1.08611, [3, -0.213333, 0], [3, 0.506667, 0]], [1.48027, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([1, 1.96, 2.64, 3.32, 3.96, 4.68, 5.36, 6.08, 6.68, 7.32, 8, 8.64, 9.4, 10.04, 11.56])
        keys.append([[0.130348, [3, -0.333333, 0], [3, 0.32, 0]], [0.636569, [3, -0.32, 0], [3, 0.226667, 0]],
                     [0.228525, [3, -0.226667, 0.158455], [3, 0.226667, -0.158455]],
                     [-0.314159, [3, -0.226667, 0], [3, 0.213333, 0]],
                     [0.228525, [3, -0.213333, -0.149134], [3, 0.24, 0.167776]],
                     [0.636569, [3, -0.24, 0], [3, 0.226667, 0]],
                     [0.228525, [3, -0.226667, 0.153927], [3, 0.24, -0.162982]],
                     [-0.314159, [3, -0.24, 0], [3, 0.2, 0]], [0.228525, [3, -0.2, -0.153343], [3, 0.213333, 0.163566]],
                     [0.636569, [3, -0.213333, 0], [3, 0.226667, 0]],
                     [0.228525, [3, -0.226667, 0.163256], [3, 0.213333, -0.153653]],
                     [-0.314159, [3, -0.213333, 0], [3, 0.253333, 0]],
                     [0.228525, [3, -0.253333, -0.172036], [3, 0.213333, 0.144873]],
                     [0.636569, [3, -0.213333, 0], [3, 0.506667, 0]], [0.0873961, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([1, 1.96, 2.64, 3.32, 3.96, 4.68, 5.36, 6.08, 6.68, 7.32, 8, 8.64, 9.4, 10.04, 11.56])
        keys.append(
            [[0.0843279, [3, -0.333333, 0], [3, 0.32, 0]], [0.900415, [3, -0.32, -0.223889], [3, 0.226667, 0.158588]],
             [1.23176, [3, -0.226667, 0], [3, 0.226667, 0]], [0.730143, [3, -0.226667, 0], [3, 0.213333, 0]],
             [1.23176, [3, -0.213333, 0], [3, 0.24, 0]], [0.900415, [3, -0.24, 0], [3, 0.226667, 0]],
             [1.23176, [3, -0.226667, 0], [3, 0.24, 0]], [0.730143, [3, -0.24, 0], [3, 0.2, 0]],
             [1.23176, [3, -0.2, 0], [3, 0.213333, 0]], [0.900415, [3, -0.213333, 0], [3, 0.226667, 0]],
             [1.23176, [3, -0.226667, 0], [3, 0.213333, 0]], [0.730143, [3, -0.213333, 0], [3, 0.253333, 0]],
             [1.23176, [3, -0.253333, 0], [3, 0.213333, 0]],
             [0.900415, [3, -0.213333, 0.107266], [3, 0.506667, -0.254758]], [0.145688, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.101286, [3, -0.333333, 0], [3, 0.32, 0]], [0.11049, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.108956, [3, -0.453333, 0], [3, 0.453333, 0]], [0.11049, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.108956, [3, -0.466667, 0], [3, 0.413333, 0]], [0.11049, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.108956, [3, -0.44, 0], [3, 0.466667, 0]], [0.11049, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [0.107422, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.075208, [3, -0.333333, 0], [3, 0.32, 0]], [0.277696, [3, -0.32, 0], [3, 0.453333, 0]],
                     [-0.0168321, [3, -0.453333, 0], [3, 0.453333, 0]], [0.277696, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [-0.0168321, [3, -0.466667, 0], [3, 0.413333, 0]], [0.277696, [3, -0.413333, 0], [3, 0.44, 0]],
                     [-0.0168321, [3, -0.44, 0], [3, 0.466667, 0]], [0.277696, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [0.07214, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.389678, [3, -0.333333, 0], [3, 0.32, 0]], [0.392746, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.194861, [3, -0.453333, 0], [3, 0.453333, 0]], [0.392746, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.194861, [3, -0.466667, 0], [3, 0.413333, 0]], [0.392746, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.194861, [3, -0.44, 0], [3, 0.466667, 0]], [0.392746, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [0.389678, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[1.1796, [3, -0.333333, 0], [3, 0.32, 0]], [1.18114, [3, -0.32, 0], [3, 0.453333, 0]],
                     [1.16887, [3, -0.453333, 0], [3, 0.453333, 0]], [1.18114, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [1.16887, [3, -0.466667, 0], [3, 0.413333, 0]], [1.18114, [3, -0.413333, 0], [3, 0.44, 0]],
                     [1.16887, [3, -0.44, 0], [3, 0.466667, 0]], [1.18114, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [1.17654, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.3068, [3, -0.333333, 0], [3, 0.32, 0]], [0.3068, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.684, [3, -0.453333, 0], [3, 0.453333, 0]], [0.3068, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.684, [3, -0.466667, 0], [3, 0.413333, 0]], [0.3068, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.684, [3, -0.44, 0], [3, 0.466667, 0]], [0.3068, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [0.3068, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.130348, [3, -0.333333, 0], [3, 0.32, 0]], [0.131882, [3, -0.32, 0], [3, 0.453333, 0]],
                     [-0.073674, [3, -0.453333, 0], [3, 0.453333, 0]], [0.131882, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [-0.073674, [3, -0.466667, 0], [3, 0.413333, 0]], [0.131882, [3, -0.413333, 0], [3, 0.44, 0]],
                     [-0.073674, [3, -0.44, 0], [3, 0.466667, 0]], [0.131882, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [0.131882, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[-0.06592, [3, -0.333333, 0], [3, 0.32, 0]], [-0.292952, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.00771189, [3, -0.453333, 0], [3, 0.453333, 0]],
                     [-0.292952, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.00771189, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.292952, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.00771189, [3, -0.44, 0], [3, 0.466667, 0]], [-0.292952, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [-0.06592, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append(
            [[-0.1733, [3, -0.333333, 0], [3, 0.32, 0]], [-0.371186, [3, -0.32, 0.0503575], [3, 0.453333, -0.0713399]],
             [-0.538392, [3, -0.453333, 0], [3, 0.453333, 0]], [-0.371186, [3, -0.453333, 0], [3, 0.466667, 0]],
             [-0.538392, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.371186, [3, -0.413333, 0], [3, 0.44, 0]],
             [-0.538392, [3, -0.44, 0], [3, 0.466667, 0]],
             [-0.371186, [3, -0.466667, -0.0585932], [3, 0.506667, 0.0636155]],
             [-0.171766, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[-0.0923279, [3, -0.333333, 0], [3, 0.32, 0]], [-0.0923279, [3, -0.32, 0], [3, 0.453333, 0]],
                     [0.196393, [3, -0.453333, 0], [3, 0.453333, 0]], [-0.0923279, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [0.196393, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.0923279, [3, -0.413333, 0], [3, 0.44, 0]],
                     [0.196393, [3, -0.44, 0], [3, 0.466667, 0]], [-0.0923279, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [-0.091998, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append(
            [[1.52637, [3, -0.333333, 0], [3, 0.32, 0]], [1.51563, [3, -0.32, 0.00465508], [3, 0.453333, -0.00659469]],
             [1.49262, [3, -0.453333, 0], [3, 0.453333, 0]], [1.51563, [3, -0.453333, 0], [3, 0.466667, 0]],
             [1.49262, [3, -0.466667, 0], [3, 0.413333, 0]], [1.51563, [3, -0.413333, 0], [3, 0.44, 0]],
             [1.49262, [3, -0.44, 0], [3, 0.466667, 0]], [1.51563, [3, -0.466667, 0], [3, 0.506667, 0]],
             [1.49569, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[-0.10282, [3, -0.333333, 0], [3, 0.32, 0]], [-0.10282, [3, -0.32, 0], [3, 0.453333, 0]],
                     [-0.158044, [3, -0.453333, 0], [3, 0.453333, 0]], [-0.10282, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [-0.158044, [3, -0.466667, 0], [3, 0.413333, 0]], [-0.10282, [3, -0.413333, 0], [3, 0.44, 0]],
                     [-0.158044, [3, -0.44, 0], [3, 0.466667, 0]], [-0.10282, [3, -0.466667, 0], [3, 0.506667, 0]],
                     [-0.104354, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([1, 1.96, 3.32, 4.68, 6.08, 7.32, 8.64, 10.04, 11.56])
        keys.append([[0.059784, [3, -0.333333, 0], [3, 0.32, 0]], [0.06592, [3, -0.32, 0], [3, 0.453333, 0]],
                     [-0.530805, [3, -0.453333, 0], [3, 0.453333, 0]], [0.06592, [3, -0.453333, 0], [3, 0.466667, 0]],
                     [-0.530805, [3, -0.466667, 0], [3, 0.413333, 0]], [0.06592, [3, -0.413333, 0], [3, 0.44, 0]],
                     [-0.530805, [3, -0.44, 0], [3, 0.466667, 0]],
                     [0.06592, [3, -0.466667, -0.00565163], [3, 0.506667, 0.00613605]],
                     [0.0720561, [3, -0.506667, 0], [3, 0, 0]]])

        try:
            # uncomment the following line and modify the IP if you use this script outside Choregraphe.

            self.motionProxy.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
            print err

    def dance(self):
        a = random.random()
        print a
        if a > 0.5:
            self.dance1()
        else:
            self.dance2()

    def sing(self):
        self.motion.say('')

    #show poses
    def pose(self,mode):
        pass


